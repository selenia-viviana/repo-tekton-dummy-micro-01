
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-aplicar-yaml
  namespace: dummy-tekton-001
spec:
  workspaces:
  - name: source
  params:
    - name: directorio-yaml
      description: DIRECTORIO QUE CONTIENE LOS YAML PARA EL DESPLIEGUE DE LA APLICACION
      type: string
      default: "apps"
  steps:
    - name: aplicacion-yaml
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash", "-c"]
      args:
        - |-
          echo APLICANDO 'YAMLs' DEL DIRECTORIO: [$(inputs.params.directorio-yaml)]
          oc apply -f $(inputs.params.directorio-yaml)
          echo -----------------------------------

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-actualizar-aplicacion
  namespace: dummy-tekton-001
spec:
  params:
    - name: recurso-deployment
      description: NOMBRE DEL RECURSO 'DEPLOYMENT' DE LA APLICACION
      type: string
      
    - name: IMAGE
      description: NOMBRE DEL RECURSO 'IMAGEN' CON LA CUAL SE REALIZARA LA ACTUALIZACION
      type: string
  steps:
    - name: patch
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      command: ["/bin/bash", "-c"]
      args:
        - |-
          echo ACTUALIZANDO RECURSO 'DEPLOYMENT' CON: [$(inputs.params.recurso-deployment)]
          echo ACTUALIZANDO RECURSO 'DEPLOYMENT' CON: [$(inputs.params.IMAGE)]
          oc patch deployment $(inputs.params.recurso-deployment) --patch='{"spec":{"template":{"spec":{
            "containers":[{
              "name": "$(inputs.params.RECURSO-DEPLOYMENT)",
              "image":"$(inputs.params.IMAGE)"
            }]
          }}}}'

--- 
 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-build-and-deploy
  namespace: dummy-tekton-001 
spec:
  workspaces:
  - name: workspace-pipeline
  
  params:
  - name: recurso-deployment
    type: string
    description: NOMBRE DEL RECURSO 'DEPLOYMENT' DE LA APLICACION
    
  - name: url-github
    type: string
    description: URL GITHUB DONDE ESTAN LOS YAML PARA EL DESPLIEGUE
    
  - name: rama-github
    type: string
    description: NOMBRE DE RAMA USADA EN GITHUB
    default: "master"
    
  - name: IMAGE
    type: string
    description: NOMBRE DEL RECURSO 'IMAGE' DE LA APLICACION
    
  tasks:
  - name: pipe-obtener-fuentes-repositorio
    taskref:
      name: git-clone
      kind: ClusterTask
    params:
    - name: url
      value: $(params.url-github)
    - name: subdirectory
      value: ""
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.rama-github)
    workspaces:
    - name: output
      workspace: workspace-pipeline

  - name: pipe-generar-imagen
    taskRef:
      name: buildah
      kind: ClusterTask
    params:
    - name: IMAGE
      value: $(params.IMAGE)
    - name: TLSVERIFY
      value: "false"
    workspaces:
    - name: source
      workspace: workspace-pipeline
    runafter:
    - pipe-obtener-fuentes-repositorio
    
  - name: pipe-aplicar-yaml
    taskRef:
      name: task-aplicar-yaml
    workspaces:
    - name: source
      workspace: workspace-pipeline
    runafter:
    - pipe-generar-imagen
    
  - name: pipe-actualizar-aplicacion
    taskref:
      name: task-actualizar-aplicacion
    params:
    - name: param-deployment
      value: $(params.recurso-deployment)
    - name: IMAGE
      value: $(params.IMAGE) 
    runafter:
    - pipe-aplicar-yaml
