
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: TASK-APLICAR-YAML
  namespace: dummy-tekton-001
spec:
  workspaces:
  - name: source
  params:
    - name: DIRECTORIO-YAML
      description: DIRECTORIO QUE CONTIENE LOS YAML PARA EL DESPLIEGUE DE LA APLICACION
      type: string
      default: "apps"
  steps:
    - name: APLICACION-YAML
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash", "-c"]
      args:
        - |-
          echo APLICANDO 'YAMLs' DEL DIRECTORIO: [$(inputs.params.DIRECTORIO-YAML)]
          oc apply -f $(inputs.params.DIRECTORIO-YAML)
          echo -----------------------------------

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: TASK-ACTUALIZAR-APLICACION
  namespace: dummy-tekton-001
spec:
  params:
    - name: RECURSO-DEPLOYMENT
      description: NOMBRE DEL RECURSO 'DEPLOYMENT' DE LA APLICACION
      type: string
      
    - name: RECURSO-IMAGE
      description: NOMBRE DEL RECURSO 'IMAGEN' CON LA CUAL SE REALIZARA LA ACTUALIZACION
      type: string
  steps:
    - name: patch
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      command: ["/bin/bash", "-c"]
      args:
        - |-
          echo ACTUALIZANDO RECURSO 'DEPLOYMENT' CON: [$(inputs.params.RECURSO-DEPLOYMENT)]
          echo ACTUALIZANDO RECURSO 'DEPLOYMENT' CON: [$(inputs.params.IMAGE)]
          oc patch deployment $(inputs.params.RECURSO-DEPLOYMENT) --patch='{"spec":{"template":{"spec":{
            "containers":[{
              "name": "$(inputs.params.RECURSO-DEPLOYMENT)",
              "image":"$(inputs.params.RECURSO-IMAGE)"
            }]
          }}}}'

--- 
 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: PIPELINE-BUILD-AND-DEPLOY
  namespace: dummy-tekton-001 
spec:
  workspaces:
  - name: WORKSPACE-PIPELINE
  
  params:
  - name: RECURSO-DEPLOYMENT
    type: string
    description: NOMBRE DEL RECURSO 'DEPLOYMENT' DE LA APLICACION
    
  - name: URL-GITHUB
    type: string
    description: URL GITHUB DONDE ESTAN LOS YAML PARA EL DESPLIEGUE
    
  - name: RAMA-GITHUB
    type: string
    description: NOMBRE DE RAMA USADA EN GITHUB
    default: "master"
    
  - name: RECURSO-IMAGE
    type: string
    description: NOMBRE DEL RECURSO 'IMAGE' DE LA APLICACION
    
  tasks:
  - name: PIPE-OBTENER-FUENTES-REPOSITORIO
    taskRef:
      name: TASK-OBTENER-FUENTES-REPOSITORIO
      kind: ClusterTask
    params:
    - name: param-url
      value: $(params.URL-GITHUB)
    - name: param-subdirectory
      value: ""
    - name: param-deleteExisting
      value: "true"
    - name: param-rama
      value: $(params.RAMA-GITHUB)
    workspaces:
    - name: workspace
      workspace: WORKSPACE-PIPELINE

  - name: PIPE-GENERAR-IMAGEN
    taskRef:
      name: TASK-GENERAR-IMAGEN
      kind: ClusterTask
    params:
    - name: param-image
      value: $(params.RECURSO-IMAGE)
    - name: param-tlsverify
      value: "false"
    workspaces:
    - name: source
      workspace: WORKSPACE-PIPELINE
    runAfter:
    - PIPE-OBTENER-FUENTES-REPOSITORIO
    
  - name: PIPE-APLICAR-YAML
    taskRef:
      name: TASK-APLICAR-YAML
    workspaces:
    - name: source
      workspace: WORKSPACE-PIPELINE
    runAfter:
    - PIPE-GENERAR-IMAGEN
    
  - name: PIPE-ACTUALIZAR-APLICACION
    taskRef:
      name: TASK-ACTUALIZAR-APLICACION
    params:
    - name: param-deployment
      value: $(params.RECURSO-DEPLOYMENT)
    - name: param-image
      value: $(params.RECURSO-IMAGE) 
    runAfter:
    - PIPE-APLICAR-YAML
